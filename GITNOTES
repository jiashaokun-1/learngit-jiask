git命令暂时笔记处：
// 将当前目录(工作区: working directory)创建为: 版本库/仓库repository
$ git init

// 向版本库添加文件 或 添加修改: git add <file>
$ git add readme.txt

未被add的修改都只存在于working directory中, 被add后进入stage

// 将暂存区(stage)里的修改提交到版本库: git commit -m <message>
$ git commit -m "add readme.txt"

经过commit stage后, 所有修改被提交到repository

// 查看当前版本库的状态: git status
$ git status

// 查看文件最近的修改: git diff <file>
//  修改提交到repository后，无法查看
$ git diff readme.txt

// 查看文件相对于repository中的所有修改: git diff HEAD -- <file>
//  修改提交到repository后，无法查看
$ git diff HEAD -- readme.txt

// 查看commit log, 从最近到最远: git log
//  参数 --pretty=oneline 显示精简日志
$ git log [--pretty=oneline]

// 版本回退: git reset --hard HEAD^
//  HEAD也可用commit id直接表示
//  其中 HEAD^ 表示上个版本, HEAD^^ 表示上上个版本, HEAD~100 表示第100个版本
$ git reset --hard HEAD^

// 查看每一条对于repository的命令: git reflog
//  可以查看所有的commit ID, 实现来回穿越
$ git reflog

// 版本'向前'回退: git reset --hard <commit id>
$ git reset --hard 5465a

// 撤销修改: git checkout -- <file>
//  一种是file未被add, 命令可将file的修改撤销, file回到repository中的版本
//  一种是file已被add(在stage中), 但working directory中有了新的修改, 
//   命令仅将working directory中的修改撤销, file回到stage中的版本
//  也可撤销对file的rm(删除): 前提file是还存在于repository中
$ git checkout -- readme.txt

// 撤销动作: git restore <file>
//  撤销file在working directory中的所有修改, file回到repository中的版本
$ git restore readme.txt

// 撤销动作: git restore --staged <file>
//  撤销对file的add, file在working directory中的所有修改都仍然存在
$ git restore --staged readme.txt

// 工作区working directory删除file: rm <file>
//  file仍存在于repository, 可通过 git checkout -- <file> 撤销对file的删除
$ rm test.txt

// 仓库repository删除file: git rm <file>
//  git rm <file>后, 若未commit, 则可通过: 
//  git restore --staged <file>和git checkout -- <file>抵消git rm <file>的所有影响
$ git rm test.txt
$ git commit -m "delete test.txt"

